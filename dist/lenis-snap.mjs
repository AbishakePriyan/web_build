function removeParentSticky(t){"sticky"===getComputedStyle(t).position&&(t.style.setProperty("position","static"),t.dataset.sticky="true"),t.offsetParent&&removeParentSticky(t.offsetParent)}function addParentSticky(t){"true"===t?.dataset?.sticky&&(t.style.removeProperty("position"),delete t.dataset.sticky),t.offsetParent&&addParentSticky(t.offsetParent)}function offsetTop(t,e=0){const s=e+t.offsetTop;return t.offsetParent?offsetTop(t.offsetParent,s):s}function offsetLeft(t,e=0){const s=e+t.offsetLeft;return t.offsetParent?offsetLeft(t.offsetParent,s):s}function scrollTop(t,e=0){const s=e+t.scrollTop;return t.offsetParent?scrollTop(t.offsetParent,s):s+window.scrollY}function scrollLeft(t,e=0){const s=e+t.scrollLeft;return t.offsetParent?scrollLeft(t.offsetParent,s):s+window.scrollX}class Slide{constructor(t,{align:e=["start"],ignoreSticky:s=!0,ignoreTransform:i=!1}={}){this.element=t,this.ignoreSticky=s,this.ignoreTransform=i,this.align=[e].flat(),this.rect={},this.wrapperResizeObserver=new ResizeObserver(this.onWrapperResize),this.wrapperResizeObserver.observe(document.body),this.resizeObserver=new ResizeObserver(this.onResize),this.resizeObserver.observe(this.element)}destroy(){this.wrapperResizeObserver.disconnect(),this.resizeObserver.disconnect()}setRect({top:t,left:e,width:s,height:i,element:o}){t=t??this.rect.top,e=e??this.rect.left,s=s??this.rect.width,i=i??this.rect.height,o=o??this.rect.element,t===this.rect.top&&e===this.rect.left&&s===this.rect.width&&i===this.rect.height&&o===this.rect.element||(this.rect.top=t,this.rect.y=t,this.rect.width=s,this.rect.height=i,this.rect.left=e,this.rect.x=e,this.rect.bottom=t+i,this.rect.right=e+s)}onWrapperResize=()=>{let t,e;if(this.ignoreSticky&&removeParentSticky(this.element),this.ignoreTransform)t=offsetTop(this.element),e=offsetLeft(this.element);else{const s=this.element.getBoundingClientRect();t=s.top+scrollTop(this.element),e=s.left+scrollLeft(this.element)}this.ignoreSticky&&addParentSticky(this.element),this.setRect({top:t,left:e})};onResize=([t])=>{const e=t.borderBoxSize[0].inlineSize,s=t.borderBoxSize[0].blockSize;this.setRect({width:e,height:s})}}console.log("snaps");class Snap{constructor(t,{type:e="mandatory",velocityThreshold:s=1,onSnapStart:i,onSnapComplete:o}={}){this.onWindowResize=()=>{this.viewport.width=window.innerWidth,this.viewport.height=window.innerHeight},this.onScroll=({scroll:t,limit:e,lastVelocity:s,velocity:i,isScrolling:o,isTouching:r},{userData:n,isSmooth:h,type:l})=>{const a=Math.abs(s)>Math.abs(i),c=Math.sign(s)!==Math.sign(i)&&0!==i;if(Math.abs(i)<this.velocityThreshold&&a&&!c&&"snap"!==(null==n?void 0:n.initiator)){t=Math.ceil(t);let s=[0,...Array.from(this.snaps,(([t,e])=>e)),e];console.log(s),this.elements.forEach((({rect:t,align:e})=>{let i;e.forEach((e=>{"start"===e?i=t.top:"center"===e?i=t.top+t.height/2-this.viewport.height/2:"end"===e&&(i=t.top+t.height-this.viewport.height),void 0!==i&&s.push(Math.ceil(i))}))})),s=s.sort(((t,e)=>Math.abs(t)-Math.abs(e)));let i=s.findLast((e=>e<=t));void 0===i&&(i=s[0]);const o=Math.abs(t-i);let r=s.find((e=>e>=t));void 0===r&&(r=s[s.length-1]);const n=o<Math.abs(t-r)?i:r,h=Math.abs(t-n);("mandatory"===this.type||"proximity"===this.type&&h<=this.viewport.height)&&this.lenis.scrollTo(n,{userData:{initiator:"snap"},onStart:()=>{var t;null===(t=this.onSnapStart)||void 0===t||t.call(this,n)},onComplete:()=>{var t;null===(t=this.onSnapComplete)||void 0===t||t.call(this,n)}})}},this.lenis=t,this.type=e,this.elements=new Map,this.snaps=new Map,this.velocityThreshold=s,this.onSnapStart=i,this.onSnapComplete=o,this.viewport={width:window.innerWidth,height:window.innerHeight},this.onWindowResize(),window.addEventListener("resize",this.onWindowResize),this.lenis.on("scroll",this.onScroll)}destroy(){this.lenis.off("scroll",this.onScroll),window.removeEventListener("resize",this.onWindowResize),this.elements.forEach((t=>t.destroy()))}add(t){const e=crypto.randomUUID();return this.snaps.set(e,t),()=>this.remove(e)}remove(t){this.snaps.delete(t)}addElement(t,e={}){const s=crypto.randomUUID();return this.elements.set(s,new Slide(t,e)),()=>this.removeElement(s)}removeElement(t){this.elements.delete(t)}}export{Snap as default};
//# sourceMappingURL=lenis-snap.mjs.map
